\ProvidesPackage{luacas}

\RequirePackage{luacode}
\RequirePackage{pgfkeys}
\RequirePackage{xparse}
\RequirePackage{tikz}
\RequirePackage{xcolor}
\RequirePackage{amsmath}
\RequirePackage{environ}

\directlua{require('test.parser')
           require('test.helper')
} 

\NewEnviron{CAS}{\luaexec{CASparse([[\BODY]])}}

%\newcommand{\eval}[1]{\luaexec{tex.print(parse('#1'):tolatex())}}

%%%%%%%%%%
%% Core %%
%%%%%%%%%%

\NewDocumentCommand{\print}{s m}{%
    \IfBooleanTF{#1}{%
        \luaexec{
            local sym = #2
            tex.print(sym:tolatex())
        }%
    }{%
        \luaexec{
            local sym = #2
            tex.print(sym:autosimplify():tolatex())
        }%
    }%
}

\NewDocumentCommand{\eprint}{s m}{%
    \IfBooleanTF{#1}{%
        \directlua{
            local sym = #2
            tex.sprint([[\unexpanded{\begin{verbatim}]]..tostring(sym)..[[\end{verbatim}}]])
        }%
    }{%
        \directlua{
            local sym = #2
            tex.sprint([[\unexpanded{\begin{verbatim}]]..tostring(sym:autosimplify())..[[\end{verbatim}}]])
        }%
    }%
}

\NewDocumentCommand{\printshrub}{s m}{%
    \IfBooleanTF{#1}{%
        \luaexec{
            local sym = #2
            sym = sym:autosimplify()
            tex.print("\\node [label=90:",whatis(sym),"] {",nameof(sym),"}")
            tex.print(sym:gettheshrub())
            tex.print(";")
        }%
    }{%
        \luaexec{
            local sym = #2
            tex.print("\\node [label=90:",whatis(sym),"] {",nameof(sym),"}")
            tex.print(sym:gettheshrub())
            tex.print(";")
        }%
    }
}
    
\NewDocumentCommand{\printtree}{s m}{%
    \IfBooleanTF{#1}{%
        \luaexec{
            local sym = #2
            sym = sym:autosimplify()
            tex.print("\\node {",nameof(sym),"}")
            tex.print(sym:getthetree())
            tex.print(";")
        }%
    }{%
        \luaexec{
            local sym = #2
            tex.print("\\node {",nameof(sym),"}")
            tex.print(sym:getthetree())
            tex.print(";")
        }%
    }
}

\NewDocumentCommand{\parseforest}{s m}{%
    \IfBooleanTF{#1}{%
        \luaexec{
            local sym = #2
            sym = sym:autosimplify()
            tex.print("\\def\\forestresult{")
            tex.print("[")
            tex.print(nameof(sym))
            tex.print(sym:gettheforest())
            tex.print("]")
            tex.print("}")
        }%
    }{%
        \luaexec{
            local sym = #2
            tex.print("\\def\\forestresult{")
            tex.print("[")
            tex.print(nameof(sym))
            tex.print(sym:gettheforest())
            tex.print("]")
            tex.print("}")
        }%
    }
}

\NewDocumentCommand{\freeof}{s m m}{%
    \IfBooleanTF{#1}{%
        \luaexec{
            local sym1 = #2
            local sym2 = #3
            if sym1:freeof(sym2) then 
                tex.print(1)
            else
                tex.print(0)
            end
        }
    }{%
        \luaexec{
            local sym1 = #2
            local sym2 = #3
            sym1 = sym1:autosimplify()
            sym2 = sym2:autosimplify()
            if sym1:freeof(sym2) then
                tex.print(1)
            else
                tex.print(0)
            end
        }%
    }%
}

\NewDocumentCommand{\isatomic}{s m}{%
    \IfBooleanTF{#1}{
        \luaexec{
            local sym = #2
            if sym:isatomic() then 
                tex.print(1)
            else
                tex.print(0)
            end
        }
    }{%
        \luaexec{
            local sym = #2
            sym = sym:autosimplify()
            if sym:isatomic() then 
                tex.print(1)
            else
                tex.print(0)
            end
        }%
    }%   
}

\NewDocumentCommand{\isconstant}{s m}{%
    \IfBooleanTF{#1}{%
        \luaexec{
            local sym = #2
            if sym:isconstant() then 
                tex.print(1)
            else 
                tex.print(0)
            end
        }%
    }{%
        \luaexec{%
            local sym = #2
            sym = sym:autosimplify()
            if sym:isconstant() then 
                tex.print(1)
            else 
                tex.print(0)
            end
        }%
    }%
}

